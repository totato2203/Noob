# 클래스와 객체의 학습 내용 계열화
1. 클래스의 선언 규칙
2. 클래스의 컴파일 단계와 main()의 관계
3. 클래스와 객체의 차이
4. 클래스의 구성요소와 각 구성요소의 역할
5. 필드의 사용
6. 생성자의 사용
	1) 생성자의 역할
	2) default 생성자
	-----
	3) 생성자의 매개변수 활용
	4) 여러 생성자의 선언과 생성자 오버로딩
	5) 생성자를 통한 필드값의 초기화 처리 방법
7. 메서드의 사용
	1) 메서드의 핵심 기능
	2) 메서드의 리턴값
	3) 메서드의 매개변수처리
	4) 메서드의 오버로딩
	5) 메서드의 기능 처리 프로세스
	6) 종합 기능 처리 연습
	
# 메서드 내용 계열화
1. 기본 기능과 구성요소 확인
	1) 리턴유형선언 메서드명(매개변수){
			프로세서 처리
			return 리턴데이터;
	}
2. 리턴유형과 리턴데이터에 대한 학습
	0) void : return할 데이터가 없는 경우. 주로 입력만 처리, 화면 console창으로 출력만 처리
	1) 각 데이터 유형에 따른 리턴 데이터 처리
	ex) 자판기
		입력 : 지폐, 동전, 카드 / 물건 선택
		프로세스 처리 : 돈을 인식, 물건을 선택하면 돈과 선택 버튼에 대한 판단, 잔액과 실제 물건을 넘길 준비
		리턴 : 잔액, 구매한 물건
	ex) class Calculator{
			..
			int plus(int num01, int num02){
				return num01 + num02;
			}
			double div(int num01, int num02){
				return num01 / (double)num02;
			}
			void plus(){
				System.out.println(num01 + " + " + num02 + " = " + (num01 + num02));
			}
		}
			Calculator c01 = new Calculator();
			System.out.println() : console창에 display(화면 출력)
			c01.plus(); // 리턴할 데이터가 없는 경우, 화면에 출력만 처리
			int tot = c01.plus(25,50) // 리턴할 데이터가 있는 경우
3. 매개변수의 처리(*)
	1) 단일 데이터 처리
	2) 다중 데이터 처리
	3) overloading 규칙 처리
4. 메서드를 통한 프로세스 처리
	1) 매개변수와 프로세스를 통한 리턴값의 변경 처리
		ex) 두 개의 변수를 입력받아 합산값 리턴 처리
	2) 매개변수를 통해 필드값 저장 처리
	class Calcu{
		int num01;
		int num02;
		
		void setNumb01(int num01){
			this.num01 = num01;
		}
		void setNumb02(int num02){
			this.num02 = num02;
		}
		int plus(){
			return num01 + num02;
		}
		int multi(){
			return num01 * num02;
		}
	}
	3) 필드값에 있는 데이터 리턴값을 통해 리턴 처리
	4) 조건문과 반복문을 통해 데이터 처리

5. 클래스 전체 구성요소를 통한 객체 활용(자동판매기)