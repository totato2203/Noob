# java를 통한 데이터베이스 연동 처리
1. 지식계열화 순서
	1) java에 대한 이해와 실습
		클래스/객체 - 필드/생성자/메소드
		메모리 로딩
		예외 처리
	2) sql에 대한 이해와 실습 : 서버의 지원(데이터)를 활용하기 위한 언어
	3) java 프로그램의 DB 서버 연동 필요 환경 이해
		- server, client 개념 이해
			서버 : oracle database server (언제이고 접속하면 데이터를 전달가능 데몬로딩)
			클라이언트 : java 클라이언트 프로그래밍, 웹 연동 프로그래밍
		- jdbc 드라이버에 대한 이해
			접속 시 필요한 프로그래밍
				- 공통 : jdbc 드라이버(네트워크 통신 프로그램 socket)
				- 개별 및 꼭 코드가 추가적으로 필요로 하는 부분 : 개발자 코딩
		- 필요 접속 정보 : ip, port, sid, 계정, 비밀번호
				ip : 서버의 network 상 위치, domain 주소도 가능
				port : 하나의 서버에 여러가지 service를 지원할 때 연결 port 구분하여 처리
					ex) 오라클서버, 웹서버(8080), 파일서버, 메일서버
	4) 연동을 위한 핵심 객체와 순서에 대한 이해
		- 핵심 객체
			연결 객체 Connection : 접속 정보 + jdbc 드라이버
			대화 객체 Statement(sql) : sql - DB서버에 이용하는 명령어
				- SELECT * FROM emp; (서버로부터 결과를 가져오는 명령어)
				- INSERT INTO 테이블 VALUES .. (서버에 명령으로 등록)
				- UPDATE 수정, DELETE 삭제
			결과 객체 ResultSet(data) : 필요로 하는 정보(data) - SELECT 구문
				- SELECT 문을 수행한 경우만 이 객체를 사용
				- 1차적으로 ResultSet로 가져오고, 2차적으로 선언한 기본유형 데이터 타입이나
				- 문자열 데이터, VO 객체로 입력처리하여 활용한다.
			자원 해제 위에 나열된 DB서버 접속과 대화 및 결과를 받는 객체들의 자원들을 해제
				- try{}catch, 각 객체의 메모리 자원을 해제
		- 처리 순서
			위 핵심 객체를 기준으로 DB 처리
			연결
			대화
			결과받기
			자원해제
			
	5) DB 연동 처리 클래스 구조
		- 필드 선언 : 핵심 객체들을 필드로 선언하여, 기능 메서드에서 필요로 할 때 사용할 수 있게 선언
		- 연동 메소드 선언(공통) : DB서버와 연동할 때 사용
		- 기능 메소드 선언 : 공통 필드와 연동 메소드를 활용해서 sql에 따라서 기능처리 하는 메소드
	6) 기능 메소드 처리
		- 연결 처리 공통 메소드 : 클래스로 선언해서 호출
		- 조회 처리 메소드
		- 등록 처리 메소드
		- 수정 처리 메소드
		- 삭제 처리 메소드
	7) 다양한 sql을 통한 연습
	
2. DAO(Database Access Object) 처리 순서
	1) main()가 있는 class 생성
		- test용
		- 외부에서 DAO 클래스를 호출하고 객체로 생성하여 쓰는데 그 전에 자체적으로 처리 확인
	2) 공통 필드 선언
	3) 공통 연결 기능 메소드 선언
	4) 데이터 처리가 객체 형태인 경우 - 단위 VO 클래스 선언
			ResultSet ==> VO
	5) 기능메소드 선언
		리턴값 선언
			- 결과값이 있는 기능 메소드 : DB서버로부터 데이터를 가져오는 경우
			- 결과값이 없는 기능 메소드 : DB서버에 데이터를 입력/수정/삭제 처리하는 경우
		메소드명 선언
		매개변수 선언 : DB에 입력/수정/삭제 처리할 데이터 또는 WHERE에 들어갈 데이터를 선언한다.
			- 순서에 따른 프로세스 처리

# PreparedStatement 객체를 활용한 데이터 처리
1. DB 서버의 처리 구조
	client sql을 전달 받음 ==> 기존에 실행했던 명령어 인지 여부 확인 ==> (sql 명령어를 해석 생략여부)
	# 기존에 있는 명령어를 그대로 사용하는 경우 실행 속도/ 로딩 속도가 빠르게 처리된다.
2. WEB 프로그램에서 발생하는 SQL Injection이란
	로그인 : [     ]
	패스워드 : [     ]
		[로그인]
	String sql = "SELECT user FROM user_table WHERE id = '"+id+"' AND password = '"+pass+"'";
	SELECT user FROM user_table WHERE id = '세피로트' AND password = '나무';
	
	로그인 : [admin]
	패스워드 : [' OR '1' = '1]
	' OR '1' = '1
	SELECT user FROM user_table WHERE id = 'admin' AND password = ' ' or '1' = '1';
	String sql = "SELECT user FROM user_table WHERE id = '"+id+"' AND password = '"+pass+"'";
	관리자의 비밀번호를 모르더라도 인증이 되어버리는 현상이 발생한다.
3. 매개변수값의 처리 방식
	0) ? 로 데이터 mapping 처리하는 방식을 말한다.
	1) sql 선언 방식
		String sql = "select * from emp where empno = ?";
		위와 같이 ? 있는 sql을 해석하는 과정을 거친다.
	2) sql 선언된 ?의 mapping 처리
		psmt.setInt(1, empno);
		psmt.setString(2, job);
		상단에 문자열이 조합된 sql을 방지하고, 해당 컬럼과 해당 컬럼에 mapping 될 데이터만 허용하기 때문에
		 sql injection은 일어나지 않는다!
		위에 PreparedStatement에서 처리하는 sql은 특정한 컬럼과
		해당 유형(숫자, 문자열 등)에 맞는 데이터만 mapping하는 것을 허용한다.
4. 여러가지 예제를 통한 처리하기
	1) 필드 선언
		Statement ==> PreparedStatement
	2) 기능 메소드의 처리 차이
		- 만들어지면서 sql을 할당처리
				stmt = con.createStatement();
				rs = stmt.executeQuery(sql);
			==>
				pstmt = con.preparedStatement(sql);
				rs = pstmt.executeQuery();
		- ?가 들어갈 데이터를 mapping
			pstmt.set데이터유형(순번, 데이터)
			
# return 객체 설정과 키워드 검색
1. 데이터 처리 결과 객체의 활용
	1) ResultSet과 while문에 의해 처리된 내용은 ArrayList형으로 처리하여야
		여러가지 환경에서 유연하게 처리할 수 있다.
	2) 처리 순서
		- sql 작성
			ex) SELECT * FROM emp WHERE LIKE '%' || 'A' || '%'
		- 작성된 sql 내용을 단일 데이터/다중 데이터인지 판별
			단일 : Emp
			다중 : ArrayList<Emp>
		- 단위 데이터를 할당할 VO 객체 선언
			class Emp{
				private int empno;
				private String ename;
				...
				생성자 : 기본 생성자, 전달값은 전부 받는 생성자
				get/set() 선언
			}
		- 단일 데이터 유형인 경우 - return 유형 단일 객체,
			public Emp getEmp()
		- 다중 데이터 유형인 경우 - return 유형 ArrayList<VO>
			public ArrayList<Emp> getEmpList(){}
		- while(), if() 중괄호 블럭 객체로 변경 처리
			list.add(new Emp(rs.getInt("empno"), rs.getString("ename"), ...));
		- main() 호출 및 테스트 확인
			ArrayList<Emp> list = dao.getEmpList("A");
			for(Emp e : list){
				System.out.print(e.getEmpno + "\t");
			}
			
# DAO 처리 실제 순서
1. 공통 소스
	1) 공통 필드, 공통 연결 메소드
	2) SELECT, INSERT, UPDATE의 공통 코드
	3) 예외 처리
	# 복사해서 써도 되지만, 에러나는 상황에 대하여 대처할 수 있어야 한다.
	- 기본개념 이해, 에러나는 내용에 대해 사전에 정리
2. 기본 setting된 DAO를 복사해서 새로운 클래스를 만든다.
3. 필요한 기능메소드를 확인해서 필요없는 메소드는 삭제, 기능이 비슷한 메소드 복사
	반드시 메소드명이나 매개변수를 변경(overloading)하여야 에러를 막을 수 있다.
4. 기본 sql을 확인한다.(sql 편집기
5. 입력하여야 할 데이터(매개변수)와 결과물로 받는 데이터형식을 확인하다.
	입력값 : WHERE 조건문, INSERT, UPDATE, DELETE에 활용
		public void call(### 입력값으로 전닿할 데이터, 변수 선언 ###)
		1) 입력값이 없는 경우 : 매개변수 필요없음()
		2) 매개변수가 한 개인 경우 : 조건값이 1개이거나 데이터 입력 수정 데이터가 한 개인 경우
			public void getEmp(int empno)
				SELECT *
				FROM emp
				WHERE empno = ?
		3) 매개변수가 여러 개인 경우
			- 2/3개 변수로 선언 가능
				public ArrayList<Emp> empList(String ename, String job)
				key 정보로 검색하는 데이터
				SELECT *
				FROM emp
				WHERE ename = ? and job = ?;
			- 다수의 변수가 필요한 경우
				class로 선언하여, 객체로 매개변수를 받게 처리한다.
					public void insertEmp(Emp insert)
					INSERT INTO emp VALUES(?, ?, ?, ?, ?, ...)
					pstmt.setInt(1, insert.getEmpno());
					pstmt.setString(2, insert.getEname());
					pstmt.setString(3, insert.getJob());
				Map으로 선언하여, key/value 형식으로 여러 데이터를 key값으로 호출하여 등록 처리
					public void insertEmp(Map<String, String> map)
				
	결과물 : SELECT 구문을 통해서 나오는 데이터를
			ResultSet 객체에서 추출하여 리턴할 데이터 유형을 확인
		public @@@@ call(){	// 타입 결정
			@@@				// 리턴할 객체/변수 선언
			return @@@;		// 실제 데이터
		}
		1) 리턴값이 없는 경우 : void
			INSERT, UPDATE, DELETE 구문
			
		2) 단일값(기본 primitive data 유형)인 경우 : 단일 row, 단일 column
				SELECT COUNT(*) cnt from	// 단일 row
				SELECT ename from			// 단일 column
				SELECT max(sal) from
				public int call(){
					int cnt = 0;
					
					return cnt;
				}
				
		3) 단일값(객체) : 단일 row, 여러 column
				key 정보로 검색하는 데이터
				SELECT *
				FROM emp
				WHERE empno = 7780
			조회된 값을 담을 class tjsdjs, class를 리턴 유형으로 선언
				public Emp getEmp(int empno){
					Emp emp = null;
					
					return emp;
				}
		4) 다중값(객체) : 다중 row, 여러 column
				SELECT *
				FROM emp
				WHERE ename like '%%'
			조회된 값의 한 개 row에 들어갈 class를 선언
				public ArrayList<Emp> getEmpList(){
					ArrayList<Emp> list = new ArrayList<Emp>();
					
					return list;
				}
6. select의 경우, ResultSet의 기능 메소드를 정확하게 이해하여,
	1) VO 객체 만들 때 주의 사항
		- select에서 나온 결과명과 같은 이름으로 필드를 선언하는 것이 프로그래밍 오류를 줄여준다.
			private int no;
		- 생성자를 만들 때, default 생성자를 만들고,
			전체 데이터를 가져오는 생성자를 만들고,
			매개변수로 일부분 데이터를 전송할 때, 해당 필드만 선언된 생성자를 만든다.
	
	리턴하는 변수/객체에 연결한다.
	ResultSet : select sql에 의한 결과와 동일 구조로 되어 있다.
	SELECT * FROM : 기본 컬럼명으로 가져온다.
	SELECT empno no, ename name FROM : 지정된 alias명으로 rs.getXXX("컬럼명") 지정해야 한다.
		public ArrayList<Emp>
			ArrayList<Emp> list
			...
			while(rs.next()){	// 행 단위 이동
				// 데이터를 추가할 때, 생성자를 copy 해놓고 보면 데이터에 맞게 등록하도록 한다.
				// public Emp(int empno, String ename, String job, int mgr,
				//	Date hiredate, double sal, double comm, int deptno)
				list.add(new Emp(
					rs.getInt("empno"),	// select에 있는 컬럼명과 동일해야 한다. ***
					rs.getString("ename"),
					rs.getString("job"),
					rs.getInt("mgr"),
					rs.getDate("hiredate"),
					rs.getDouble("sal"),
					rs.getDouble("comm"),
					rs.getInt("deptno")
					)
				);
			}
7. 기타 코드(자원해제/예외코드처리)는 select,insert, update, delete와 구분하고 복사하여 처리한다.

# 등록/수정/삭제
1. 기존 프로세스와 유사
2. 추가 코드
	1) con.setAutocommit(false)
		자동 commit을 방지
	2) ResultSet은 사용하지 않음 - rs 코드는 삭제, 예외 처리 포함
	3) pstmt.executeUpdate();
	4) 완료 시, conn.commit() 처리
		이후 	pstmt.close();
				con.close();
	5) 예외 발생 시, conn.rollback() - 중간에 문제가 발생 시 롤백

# 주요 에러 내용과 대응
1. 에러 내용
	DB 에러:ORA-00903: invalid table name :
	DB 에러:ORA-00933: SQL command not properly ended
		sql 문제
	DB 에러:부적합한 열 인덱스
		선언된 sql의 ?와 pstmt.setXXX(1, @@@)의 개수나 타입이 맞지 않을 때

2. 점검할 부분(DB 관련 에러를 줄이기 위해서)
	1) sql을 반드시 실행한 후 적용하기 바랍니다.
		- 실행한 내용을 변경하지 않고 적용
	2) System.out.println(sql);으로 실행된 sql을 확인
	3) ?의 순서와 type을 점검하고 진행
	4) 코드 순서는 사전에 정리된 내용으로 진행

# 기능메소드 처리 순서
1. 메소드 기본 형식 선언
	1) 리턴값, 매개변수 결정
		- 1단계로는 ResultSet 객체를 활용해서 System.ou.println()
		- 화면 UI의 종류에 따라 가변적으로 처리하려면 VO객체를 리턴값, 매개변수로 처리해야 한다.
		- 일반적으로 객체형식으로 만들어 처리한다.
		
	2) 리턴값과 매개변수가 VO 클래스를 필요로하면 VO 클래스 선언
		사원정보 : ArrayList<Emp> 형태 리턴
		조회정보 : Emp sch를 매개변수로 선언
		ex) public ArrayList<Emp> getEmpList(Emp sch){
				ArrayList<Emp> list = new ArrayList<Emp>();
				
				return list;
			}
			조회를 통해 처리되지 않으면 void
			public void insertEmp(Emp insert){
			
			}
		
		
	3) 중괄호 블럭에 처리할 내용({})
		- 공통 연결 객체 처리할 내용 - DB 접속
		- 계층형 연동 관계 이해(필드에 사용할 메모리를 선언)
			접속 ==> 접속한 객체로 대화
			==> 대화한 객체로 결과 처리 객체
			==> 결과 객체로 출력 및 VO 객체 할당
			==> 결과객체 자원해제
			==> 대화객체 자원해제
			==> 접속객체 자원해제
		ps) 접속객체가 setConn() 공통 메소드를 통해서 메모리에 할당되면
			접속객체 안에 있는 기능메소드를 통해서 대화객체가 만들어진다.
		- 접속객체를 통한 대화객체(Statement) 만들기
		- sql 문을 대화객체를 통해서 처리하고 그 결과객체(ResultSet) 가져오기
		- 결과객체(ResultSet)의 구조에 대한 이해
			행/열로 된 테이블 형태의 객체이다.
			.next() : 행 단위로 호출, 데이터가 있는 행일 때는 true, 없는 행일 때는 false
			.getString("컬럼명"), getInt(index번호)에 대한 이해
				열 단위로 접근
			위 기능메소드를 통해서 가져오는 데이터 확인
			데이터 내용을 VO 객체에 할당 처리.. ArrayList에 할당 처리
		- ResultSet와 반복문을 통한 처리
		- 자원의 해제
		- 예외 처리

# 조회 기능 메소드 처리
1. 메소드 선언 : 리턴값, 매개변수
2. 공통 연결 메소드 호출 : setConn();
3. sql 문자열 선언 : String sql = "select * from emp";
4. 대화객체 생성 : stmt = con.createStatement();
5. 결과객체 생성 : rs = stmt.executeQuery(sql);
6. while()문을 통해 결과객체 출력
	while(rs.next()){	// 행 단위 호출
		// 열 단위 호출	SELECT 컬럼명1, 컬럼명2, ... from 테이블
		// rs.get데이터유형("컬럼명")	컬럼명이 별칭이면 별칭을 입력한다.
		rs.getInt("empno");
	}
7. 자원해제 : rs.close(); / stmt.close(); / con.close();
8. try{}catch문 예외처리 추가
	DB 기본 예외 : SQLException
	일반 예외 : Exception
	기타 자원해제 : finally{}
		if(rs != null) rs.close();
9. main()에서 기능 메소드 호출

# 기능메소드의 리턴값과 매개변수 처리
1. 리턴값 처리
	1) 단일데이터 : SELECT count(*) cnt FROM emp
		위 sql의 결과는 단일 데이터로 할당되는 데이터이기 때문에
		public int empCnt(){
			int cnt = 0
			if(rs.next())
				cnt = rs.getInt("cnt");
			
			return cnt;
		}
		
	2) 단일 row 데이터
		SELECT *
		FROM emp
		WHERE empno = 7780;		// ket값이기에 행이 1 row만 있는 여러 속성
		- 속성을 VO 클래스로 선언하고, 리턴 객체를 하나의 값으로 처리한다.
		public Emp getEmp(int empno) {
			String sql = "select * from emp where empno = " + empno;
			Emp emp = null;
			if(rs.next()){
				emp = new Emp(rs.getEmpno(), rs.getEname(), rs.getJob(), ...);
			}
			
			return emp;
		}
		
	3) 다중 row 데이터(테이블 형태)
		SELECT * FROM emp
		
		public ArrayList<Emp> getEmp(){
			ArrayList<Emp> list = new ArrayList<Emp>();
			while(rs.next()){
				list.add(new Emp(rs.getEmpno(), rs.getEname(), ...));
			}
			
			return list;
		}
		
2. 매개변수 처리

# 기능메소드 처리 핵심
1. 공통 내용은 에러가 났을 때 처리할 수 있는 능력
	- copy해서 사용 (이해하고 활용할 수만 있으면 됨)
2. 핵심 코드
	0) 메소드 선언 : return 값, 매개변수 값
	1) sql 작성
	2)	while(rs.next()){
			객체 할당
			rs.getXXX()
		}





