package javaexp.a02_start2;

public class A04_Literal_Block {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		/*
		#리터럴
		1. 소스 코드 내에 직접 입력된 변수의 초기값
		2. 정수, 실수, 문자, 논리 리터럴이 있다.
		3. 할당하는 데이터가 있는 것 자체를 말한다.
		 */
		
		int num01 = 35;
		// 35라는 정수형 데이터를 표현하는 리터럴
		// 이 35 리터럴 데이터가 변수 num01에 할당된다.
		double num02 = 24.21;
		// 24.21이라는 실수형 리터럴 데이터가 num02 변수에 할당.
		System.out.println(num01);
		System.out.println(num02);
		/*
		# 중괄호 블럭의 사용
		1. 모든 코드는 {}(중괄호) 단위로 계층적으로 사용하고 있다.
		2. 최상위 단위인 클래스 선언으로부터 메서드, 조건문, 반복문 기능 블럭 등에
			이 내용이 사용되는데, 계층적으로 효율적으로 선언하여, 해당 블럭 내에 명령문들이 사용된다.
		3. 이 중괄호 블럭이 계층적으로 설정이 안 되어 에러가 발생하는 경우가 많다.
			아래 예는 중괄호 블럭이 중간에 하나 빠지는 예이다.
			{
				{
			}
			
			{
				{
					{
				}
			}
		4. 중괄호 블럭을 효율적으로 처리하기 위한 방법
			1) 모든 코드의 중괄호 시작과 마지막을 사전에 만든 후에 삽입하여 명령 코드를 작성한다.
			if(true){
			
			}
			void call(){
			}
			2) 코드가 많아져 이런 에러가 발생 시, 해당 범위 내에 있는 모든 내용을
				주석문으로 설정하고, 하나씩 단계별로 주석문을 풀어가면서 빠진 부분을 확인한다.
		 */

	}

}
