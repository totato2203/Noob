/*
help
-> install new software
-> Work with : http://exerd.com/update 입력
-> Next
-> 뭐가 뜨면 다 체크
-> Trust Selected
-> 완료되면 Restart 동의
-> Restart 후 Open perspective에 exerd 있으면 성공

database 파일 우클릭
-> new
-> other
-> exerd
-> 대상 DBMS : oracle 9i~12
-> 파일이름 : z01_start.exerd
 */

/*
# 개체 만들어보기
1. ppt 자료의 직원과 프로젝트를 논리 erd의 entity와 속성으로 만들어보시오.

# 데이터베이스의 생명주기
1. 요구사항 수집 및 분석
	사용자들의 요구사항을 듣고 분석하여 데이터베이스 구축의 범위를 정하는 단계
	1) 현실세계의 대상 및 사용자의 요구 등을 정리 및 분석
		- 사용자 식별
		- 데이터베이스 용도 식별
		- 사용자 요구사항 수집 및 명세
2. 설계
	분석된 요구사항을 기초로 주요 개념과 업무 프로세스 등을 식별하고(개념적 설계),
	사용하는 DBMS의 종류에 맞게 변환(논리적 설계)한 후, 데이터베이스 스키마를 도출(물리적 설계)
	1) 개념적 모델링
		중요 개념을 구분
			핵심 엔티티(독립개체) 도출
			ERD 작성
	2) 논리적 모델링
		각 개념을 구체화
			ERD-RDB 모델 사상
			상세 속성 정의
			정규화 등
	3) 물리적 모델링
		데이터베이스 생성 계획에 따라 객체, 인덱스 등을 생성
			DB 객체 정의
			테이블 및 인덱스 등 설계
3. 구현
	설계 단계에서 생성된 스키마를 실제 DBMS에 적용하여 테이블 및 관련 개체(뷰, 인덱스 등)를 만듦
	ex) 테이블스페이스(물리적 저장공간)을 지정하여 테이블/객체(시퀀스, index)를 생성
4. 운영
	구현된 데이터베이스를 기반으로 소프트웨어를 구축하여 서버를 제공함
	ex) 데이터의 입력/등록/수정/삭제를 처리
5. 감시 및 개선
	데이터베이스 운영에 따른 시스템의 문제를 관찰하고 데이터베이스 자체의 문제점을 파악하여 개선함

# 요구사항 수집 및 분석
1. 요구사항 수집 방법
	1) 실제 문서를 수집하고 분석함
	2) 담당자와의 인터뷰나 설문 조사를 통해 요구사항을 직접 수령함
	3) 비슷한 업무를 처리하는 기존의 데이터베이스를 분석함
	4) 각 업무와 연관된 모든 부분을 살펴봄
	
	웹 시스템에서 도서 정보(도서이름, 출판사, 도서단가)를 관리(등록, 수정, 삭제)한다.
	고객 정보화면서에 고객 정보(고객이름, 주소, 전화번호)를 관리(리스트, 등록, 수정, 삭제)한다.
	주문 화면을 통해 고객에 도서를 주문하되, 구객이름, 도서이름, 주문일자 정보를 주문 내역에 표시한다.
	
# 개념적 모델링
1. 요구사항을 수집하고 분석한 결과를 토대로 업무와 핵심적인 개념을 구분하고 전체적인 뼈대를 만드는 과정
2. 개체(entity)를 추출하고 각 객체들 간의 관계를 정의하여
	ER 다이어그램(ERD, Entity Relationship Diagram)을 만드는 과정까지를 말함.
	도서 : 도서이름, 출판사, 도서단가
	주문 : 주문일자
	고객 : 고객이름, 주소, 전화번호
	ex) 개체 : 실제 사용하는 데이터, 를 모델링 단계에서 나타나는 개념
	cf) 객체
	1. 현실세계에 대해 사람이 생각하는 개념이나 정보의 단위이며 객체는 컴퓨터가 취급하는 파일의 레코드에 대응된다.
	

# 논리적 모델링
1. 개념적 모델링에서 만든 ER 다이어그램을 사용하려는 DBMS에 맞게 사사(매핑)하여 실제 데이터베이스로 구현하기 위한 모델을 만드는 과정
	도서		주문		고객
	도서(도서번호pk, 도서이름, 출판사, 도서단가)
	고객(고객번호pk, 고객이름, 주소, 전화번호)
	주문(주문번호pk, 고객번호fk, 도서번호fk, 주문일자, 주문금액)

# 물리적 모델링
1. 작성된 논리적 모델을 실제 컴퓨터의 저장 장치에 저장하기 위한 물리적 구조를 정의하고 구현하는 과정
2. DBMS의 특성에 맞게 저장 구조를 정의해야 데이터베이스가 최적의 성능을 낼 수 있다.
3. 물리적 모델링 시 트랜잭션, 저장 공간 설계 측면에서 고려할 사항
	1) 응답 시간을 최소화해야 한다.
	2) 얼마나 많은 트랙잭션을 동시에 발생시킬 수 있는지 검토해야 한다.
	3) 데이터가 저장될 공간을 효율적으로 배치해야 한다.
	
ex) 아래와 같은 요구사항 정의서의 내용으로 개념적 모델링, 논리적 모델링, 물리적 모델링까지 erd를 작성해보세요.
	1) 쇼핑몰 물건관리 화면에서 다루는 데이터는 물건명, 물건가격, 재고량, 제조사를 리스트 및 이를 등록, 수정, 삭제 처리한다.
	2) 관리자 페이지 회원관리 화면에서 회원아이디, (패스워드), 회원명, 고객등급, 포인트를 리스트 등록, 수정, 삭제 처리한다.
	3) 구매화면에서 해당 물건을 선택해서 구매처리 시 개수와 구매한 날짜를 처리하여
		구매리스트 화면에 회원을 물품명 개수 구매일을 표시한다. 
		
# 개체(entity)
1. 사람, 사물, 장소, 개념, 사건과 같이 유무형의 정보를 가지고 있는 독립적인 실체
2. 데이터베이스에서 주로 다루는 개체 - 낱개로 구성된 것, 낱개가 각각 데이터 값을 가지는 것, 데이터값이 변하는 것
3. 비슷한 속성의 개체 타입(entity type)을 구성하며, 개체 집합(entity set)으로 묶임
	ex)
		축구를 아는 여자
		축구의 이해
		축구의 역사
		==> 개체(entity)
		==> 개체가 모인 것 자체 : 개체 집합(entity set)
		==> 개체가 모인 것의 형태		도서 (개체 타입 - entity type)
	ex) 학생이라는 개체에 대한 예시
		학번			이름		학과
		20170101	홍길동	수학과
		20170102	김길동	컴퓨터공학과
		20170103	신길동	수학교육과
		
		학번, 이름, 학과라는 3개의 속성
		20170101	홍길동	수학과 라는 개체의 한 값을 개체 인스턴스 또는 개체 어커런스라 하고,
		개체 집합은 객체 인스턴스의 모임을 나타낸다.
		개체 타입은 학번, 이름, 학과와 같이 속성의 이름들로만 기술된 레코드를 말한다.
		개체 타입은 논리적인 형태를 말하고 개체 인스턴스들은 데이터베이스에 저장되는 구체적인 값들로 볼 수 있다.
		
4. ER 다이어그램 상에서 개체 타입은 직사각형으로 나타냄
	1) 유형
	- 강한 개체 : 다른 개체의 도움 없이 독자적으로 전재할 수 없는 개체
	- 약한 개체 : 독자적으로는 존재할 수 없고 반드시 상위 개체 타입을 가짐

# 속성
1. 개체가 가진 성질
	개체 타입 : 도서
	속성 : 도서이름, 출판사, 도서단가
2. 속성의 ER다이어그램 표현
	1) 속성은 기본적으로 타원으로 표현, 개체 타입을 나타내는 직사각형과 실선으로 연결됨
	2) 속성의 이름은 타원의 중앙에 표기함
	3) 속성이 객체를 유일하게 식별할 수 있는 키일 경우 속성 이름에 밑줄을 그음

# 관계와 관계 타입
1. 관계
	1) 개체 사이의 연관성을 나타내는 개념
2. 관계 타입
	1) 개체 타입과 개체 타입 간의 연결 가능한 관계를 정의한 것
	2) 관계 집합은 관계로 연결된 집합을 의미
 */
CREATE TABLE book100(
	bookno NUMBER PRIMARY KEY,
	title varchar2(50)
);
CREATE TABLE customer100(
	cno NUMBER PRIMARY KEY,
	name varchar2(50)
);
CREATE TABLE order100(
	orderid NUMBER PRIMARY KEY,
	bookno NUMBER, -- FOREIGN KEY 관계 생략
	cno NUMBER -- FOREIGN KEY 관계 생략
);
INSERT INTO book100 values(1000, '축구의 역사');
INSERT INTO book100 values(1001, '축구의 이해');
INSERT INTO book100 values(1002, '피겨 교본');
INSERT INTO customer100 values(5000, '박지성');
INSERT INTO customer100 values(5001, '김연아');
INSERT INTO order100 values(1, 1000, 5000);
INSERT INTO order100 values(2, 1001, 5000);
INSERT INTO order100 values(3, 1002, 5001);
SELECT * FROM book100;
SELECT * FROM customer100;
SELECT * FROM order100;
-- ex) 고객별 도서 주문 현황 sql 작성(join)
SELECT c.name, b.title
FROM 	book100 b,
		customer100 c,
		order100 o
WHERE c.cno = o.cno -- 고객테이블의 고객번호와 주문테이블의 고객번호 조인
AND b.bookno = o.bookno; -- 도서테이블의 도서번호와 주문테이블의 도서번호 조인

/*
# 차수에 따른 관계 타입의 유형
1. 차수에 따른 유형
	관계 집합에 참가하는 개체 타입의 수를 관계 타입의 차수라고 함
	1) 1진 관계(self join) : 한 개의 객체가 자기 자신과 관계를 맺는 경우
		학생과 멘토링, 사원테이블에서 관리자번호와 사원번호
	2) 2진 관계 : 두 개의 객체가 관계를 맺는 경우
		학생과 학과가 소속으로 연관 관계를 맺는 경우
		학생 -- 소속 -- 학과
	3) 3진 관계 : 세 개의 객체가 관계를 맺는 경우
		직원 -- 수행 -- 프로젝트
				|
			   부품
2. 관계 대응수(cardinality) : 두 객체 타입의 관계에 실제로 참여하는 개별 개체 수
	1) 일대일 관계 : 하나의 개체가 하나의 개체에 대응
	2) 일대다 관계 : 하나의 개체가 여러 개체에 대응
	3) 다대일 관계 : 여러 개체가 하나의 개체에 대응
	4) 다대다 관계 : 여러 개체가 여러 개체에 대응
		ex) 학생과 수강 같이 다대다 관계인 경우에 중간에 연계되는 테이블을 만들어
			일대다, 다대일로 설정하는 경우가 많다.

3. 관계 대응수의 최소값과 최대값
	1) 관계 대응수는 각 개체가 관계에 참여하는 최대값을 의미함
	2) 관계에 차여하는 개체의 최소값을 표시하지 않는다는 단점을 보완하기 위해 다이어그램에서는
		대응수 외에 최소값과 최대값을 관계실선 위에(최소값, 최대값)으로 표기함
			학생  (최소1, 최대1)  수강  (최소2, 최대2)  강좌
		표기예
			학생 1(0, *)		소속		N(1, 1) 학생
			<< 각 관계 대응수의 최소값과 최대값 >>
					(min1, max1)		(min2, max2)
			1:1		(0, 1)				(0, 1)
			1:N		(0, *)				(0, 1)
			N:M		(0, *)				(0, *)
		ex) zero or one : 0개 혹은 1개
			exactly one : 1개
			one or more : 1개 이상
			zero or more : 0개 이상

ex) 사원엔티티타입(사원번호, 사원명, 부서번호)
	부서엔티티타입(부서번호, 부서명)
	두 엔티티 간에 1:다 관계(부서입장)를 설정하되, 부서가 할당되지 않은 사원도 있도록 ERD를 만드세요.
 */





